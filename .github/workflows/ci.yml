name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    strategy:
      fail-fast: false

      matrix:
        include:
          - { target: aarch64-unknown-linux-gnu   , os: ubuntu-latest, use-cross: true }
          - { target: arm-unknown-linux-gnueabihf , os: ubuntu-latest, use-cross: true }
          - { target: arm-unknown-linux-musleabihf, os: ubuntu-latest, use-cross: true }
          - { target: i686-unknown-linux-gnu      , os: ubuntu-latest, use-cross: true }
          - { target: i686-unknown-linux-musl     , os: ubuntu-latest, use-cross: true }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-latest, use-cross: true }
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-latest, use-cross: true }
          - { target: i686-pc-windows-msvc        , os: windows-latest                 }
          - { target: x86_64-pc-windows-gnu       , os: windows-latest                 }
          - { target: x86_64-pc-windows-msvc      , os: windows-latest                 }
          - { target: x86_64-apple-darwin         , os: macos-latest                   }

    name: Build & Test (${{ matrix.target }})
    runs-on: ${{ matrix.os }}

    env:
      BUILD_CMD: cargo
      RA_TARGET: ${{ matrix.target }}
      OPENSSL_DIR: /opt/openssl
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_AR: arm-linux-gnueabihf-ar
      CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_RUNNER: qemu-arm -L /usr/arm-linux-gnueabihf

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Overwrite build command env variable
        if: matrix.use-cross
        shell: bash
        run: echo "BUILD_CMD=cross" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Install Rust library source
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true
          components: rust-src

      - name: Build
        run: cargo build --verbose --target ${{ matrix.target }}

      - name: Run tests
        run: cargo test --verbose --target ${{ matrix.target }}

  lint:
    name: Formatter

    needs: build-test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        run: |
          rustup update stable
          rustup default stable
          rustup component add rustfmt
          rustup component add clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check code for possible improvements
        run: cargo clippy -- -D warnings

      # Prepare the Pull Request Payload artifact. If this fails, we
      # we fail silently using the `continue-on-error` option. It's
      # nice if this succeeds, but if it fails for any reason, it
      # does not mean that our lint-test checks failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: pull-request-payload
          path: pull_request_payload.json
